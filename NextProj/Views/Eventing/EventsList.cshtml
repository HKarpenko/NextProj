@model IEnumerable<EventViewModel>
@{
    ViewData["Title"] = "List";
}

<div class="row">
    <div class="col-10">
        <h1>Events</h1>
    </div>
    <div>
        <a asp-action="Create" class="btn btn-success btn-md my-2">
            Add Event +
        </a>
    </div>
    <div>
        <a asp-action="FullCalendar" class="btn btn-info btn-md my-2">
            View in Calendar
        </a>
    </div>
</div>

<form method="get">
    <div class="row mb-3">
        <div class="col-md-4">
            <label for="categoryFilter">Filter by Category:</label>
            <select id="categoryFilter" name="category" class="form-control" onchange="applyFilters()">
                <option value="">All Categories</option>
                @foreach (var category in ViewBag.Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label for="placeFilter">Filter by Place:</label>
            <select id="placeFilter" name="place" class="form-control" onchange="applyFilters()">
                <option value="">All Places</option>
                @foreach (var place in ViewBag.Places)
                {
                    <option value="@place.Id">@place.DisplayName</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label for="timeFilter">Start Time:</label>
            <input type="datetime-local" id="timeFilter" name="time" class="form-control" onchange="applyFilters()">
        </div>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th style="min-width: 280px">
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Place)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Time)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AdditionalInfo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Images)
            </th>
            <th>
                Actions
            </th>
        </tr>
    </thead>
    <tbody>
        @{
            var queryCategory = Context.Request.Query["category"];
            var queryPlace = Context.Request.Query["place"];
            var queryTime = Context.Request.Query["time"];
            var events = Model.Where(e => (string.IsNullOrEmpty(queryCategory) || e.CategoryId.ToString() == queryCategory)
                && (string.IsNullOrEmpty(queryPlace) || e.PlaceId.ToString() == queryPlace)
                && (string.IsNullOrEmpty(queryTime) || e.Time > DateTime.Parse(queryTime!)));

            foreach (var item in events)
            {
                <tr>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        @(item.Category == null ? "" : item.Category)
                    </td>
                    <td>
                        @item.Description
                    </td>
                    <td>
                        @(item.Place == null ? "" : item.Place)
                    </td>
                    <td>
                        @item.Time
                    </td>
                    <td>
                        @item.AdditionalInfo
                    </td>
                    <td>
                        @item.Images
                    </td>
                    <td>
                        <div class="events-list-actions">
                            <a asp-action="Edit" 
                                asp-route-id="@item.Id"
                                data-toggle="tooltip"
                                title="Edit"
                            >
                                <i class="bi bi-pencil-fill"></i>
                            </a>
                            <a class="delete-event" 
                                data-toggle="tooltip" 
                                title="Delete"
                                onclick="@(item.RecurringType == null ? "confirmDelete(false, '" + item.Id + "')" : "showDeleteConfirmation('" + item.Id + "')")">
                                <i class="bi bi-trash-fill"></i>
                            </a>
                        </div>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div class="modal fade" id="recurringTypeModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="recurringTypeModalLabel">Select delete type</h5>
                <button type="button" class="close" aria-label="Close" onclick="closeModal()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Do you want to delete series or occurence?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary"
                        onclick="confirmDelete(true)">
                    Series
                </button>
                <button type="button" class="btn btn-primary"
                        onclick="confirmDelete(false)">
                    Occurrence
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        let savedItemId;

        $(document).ready(function () {
            setSelectedValues();
        });

        function applyFilters() {
            const categoryFilter = $("#categoryFilter").val();
            const placeFilter = $("#placeFilter").val();
            const timeFilter = $("#timeFilter").val();

            const queryString = new URLSearchParams();

            if (categoryFilter) {
                queryString.set("category", encodeURIComponent(categoryFilter));
            }

            if (placeFilter) {
                queryString.set("place", encodeURIComponent(placeFilter));
            }

            if (timeFilter) {
                queryString.set("time", timeFilter);
            }

            window.location.search = queryString.toString();
        }

        function setSelectedValues() {
            savedItemId = null;
            const urlParams = new URLSearchParams(window.location.search);

            $("#categoryFilter").val(urlParams.get("category"));
            $("#placeFilter").val(urlParams.get("place"));
            $("#timeFilter").val(urlParams.get("time"));
        }

        function showDeleteConfirmation(id) {
            savedItemId = id;
            $("#recurringTypeModal").modal("show");
        }

        function closeModal() {
            $("#recurringTypeModal").modal("hide");
        }

        function confirmDelete(isSeries, itemId) {
            const occurrenceId = itemId || savedItemId;
            window.location.href = `/Eventing/Delete?occurrenceId=${occurrenceId}&isSeries=${isSeries}`;
        }
    </script>
}